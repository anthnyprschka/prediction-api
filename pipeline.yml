AWSTemplateFormatVersion: 2010-09-09
Description: candis-prediction-api continuous delivery CFN template

Parameters:
  ArtifactBucketName:
    Type: String
    Description: Unique name to be used for the artifact S3 bucket to be created.
    AllowedPattern: "[a-z0-9\\-_.]+"
    ConstraintDescription: "Malformed S3 Bucket Name: Must only contain lower case letters, numbers, hyphens, underscores and dots."
  GitHubOwner:
    Type: String
    Default: anthnyprschka # CandisIO
    Description: GitHub repository owner
  GitHubRepo:
    Type: String
    Default: prediction-api
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: master
    Description: GitHub repository branch
  GitHubToken:
    Type: String
    Description: GitHub repository OAuth token
    NoEcho: true
  TestEnvVariable:
    Type: String
    Description: Test variable that shall be passed to testing and production EBS environments
    NoEcho: true
  # XXX: MongoDB-URL
  # XXX: MongoDB-username
  # XXX: MongoDB-password
  # XXX: AssetBucketName-S3Bucket

Resources:
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      BucketName: !Ref ArtifactBucketName

  BuildCFNProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Sub: BuildCFNProject-${AWS::StackName}
      Description: Build EBS deployment template and source bundle using CloudFormation.
      ServiceRole: !GetAtt [ CodeBuildRole, Arn ]
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:2.7.12
        EnvironmentVariables:
          - Name: CLOUDFORMATION_PACKAGE_S3BUCKET
            Value: !Ref ArtifactBucketName
          - Name: CLOUDFORMATION_PACKAGE_S3PREFIX
            Value: !Sub '${AWS::StackName}/'

  CodeBuildRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName:
          Fn::Sub: CodeBuildRole-${AWS::StackName}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "codebuild.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /service-role/
        Policies:
          - PolicyName:
              Fn::Sub: CodeBuildTrustPolicy-${AWS::StackName}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BuildCFNProject-${AWS::StackName}
                    - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BuildCFNProject-${AWS::StackName}:*
                - Effect: Allow
                  Action:
                    - ssm:GetParameters
                  Resource:
                    - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CodeBuild/*"
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:GetObjectVersion
                  Resource:
                    - !GetAtt [ ArtifactBucket, Arn ]
                    - !Sub
                      - ${bucketArn}/*
                      - { bucketArn: !GetAtt [ ArtifactBucket, Arn ]}

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn:
        # XXX Statically referenced role.
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/AWS-CodePipeline-Service
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucketName
      Stages:

      - Name: Source
        Actions:
        - Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: 1
            Provider: GitHub
          Configuration:
            Owner: !Ref GitHubOwner
            Repo: !Ref GitHubRepo
            Branch: !Ref GitHubBranch
            OAuthToken: !Ref GitHubToken
          OutputArtifacts: [Name: SourceArtifact]
          RunOrder: 1

      - Name: Build
        Actions:
          - Name: CodeBuild
            InputArtifacts: [Name: SourceArtifact]
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts: [Name: CFNTemplateArtifact]
            Configuration:
              ProjectName:
                Ref: BuildCFNProject
            RunOrder: 1

      # See https://aws.amazon.com/blogs/aws/codepipeline-update-build-continuous-delivery-workflows-for-cloudformation-stacks/
      - Name: Testing
        Actions:
          - Name: CreateStack
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            InputArtifacts: [Name: CFNTemplateArtifact]
            Configuration:
              ActionMode: REPLACE_ON_FAILURE
              RoleArn: !GetAtt [CFNRole, Arn]
              StackName: testing-prediction-api-stack
              TemplatePath: CFNTemplateArtifact::cloudformation-deployment-template.yml
              Capabilities: CAPABILITY_IAM
              ParameterOverrides:
                -
                # - MongoDB parameters
                # - AssetBucket-S3Bucket
            RunOrder: '1'
          - Name: ApproveTestStack
            ActionTypeId:
              Category: Approval
              Owner: AWS
              Provider: Manual
              Version: '1'
            RunOrder: '2'
          - Name: DeleteTestStack
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            Configuration:
              ActionMode: DELETE_ONLY
              RoleArn: !GetAtt [CFNRole, Arn]
              StackName: candis-prediction-api-testing-stack
            RunOrder: '3'

      - Name: Production
        Actions:
          - Name: CreateOrReplaceChangeset
            InputArtifacts: [Name: CFNTemplateArtifact]
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            Configuration:
              ActionMode: CHANGE_SET_REPLACE
              RoleArn: !GetAtt [CFNRole, Arn]
              StackName: candis-prediction-api-production-stack
              ChangeSetName: candis-prediction-api-production-changeset
              TemplatePath: CFNTemplateArtifact::cloudformation-deployment-template.yml
              Capabilities: CAPABILITY_IAM
              # ParameterOverrides:
            RunOrder: 1
          - Name:  ExecuteChangeset
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            Configuration:
              ActionMode: CHANGE_SET_EXECUTE
              StackName:
                Fn::Sub: candis-prediction-api-production-stack
              ChangeSetName:
                Fn::Sub: candis-prediction-api-production-changeset
            RunOrder: 2

  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        # This gives CloudFormation access to deploy EBS applications
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkFullAccess



